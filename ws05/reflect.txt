///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Aydin Ghornbani
Student ID#: 124170226

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1) In this practice, we are dealing with a range of numbers. For example, there are 31 days in a month, and we want to type programmes for 3 consecutive days, so instead of typing just 3, we can use a macro to store the value.
This action has several advantages.

First, it will increase the readability of the program, so if other programmers want to read our program, they will know why we use operators and numbers in specific parts of the program.

Second, what if we want to write a programme to get information for more than 3 days? In that case, without using a macro or variable, we have to check every single line of the code and change every number that is related to the number of days.

Finally, if we wanted to use that number again, we could simply use a macro or variable to reuse the value. It is not very obvious in this workshop, but in the next workshops, I believe we will need to reuse many variables too often.




2) Because every value that enters the totalRating value is validated and has the correct amount, every value that the user enters first goes through validation, so there is no need to validate the sum again because it will be unnecessary and we may encounter an error when we involve extra lines of code.
There is one more problem with adding extra validation to the sum and average parts. If the validation fails (it's unlikely to fail), then we should enter the loop again to prompt the user to enter the values again. In order to do that, we will need other loop statements or advanced knowledge to reuse the first loop statement. (I tried but couldn't figure out whether it should be break; or continue;) so it's easier to validate the information in the first place to avoid redundancy and errors.