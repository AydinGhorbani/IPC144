///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  : 
Student ID#: 

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1) It was really hard to figure out how to code to avoid repetitions. I wrote a draft of code, but it took almost a day to reduce the lines from approx. 500 to approx. 300. It couldn't be done by using loops and if conditions, even if the condition was not that short. I'm sure there must be an easier way to do all this workshop.
In the first draft, my code was designed to print just the inputs provided in this workshop, and irritation was a little bit out of control, especially when using $&! signs. Except for the scanfs, the logic of each loop is the same.I think the functions will make the code much easier.


2) First of all, it makes the variables very well sorted. For example, in the code, when a variable is needed to be used, there is no need to go to the top of the page to check the type and definition of the variable. We can simply use dot to know where the variable will be used exactly.Â 
Second is the structures not in the int main function so in case of a modification or reuse they are easily accessible.
The third reason why I like structures is that we can make arrays and variables of an struct, which has its own variables, and there is no need to enter the data so many times. This comes in handy in workshops like WS7, in which the data Is a little bit large and hard to enter manually every time.

3) there is 3 levels of nesting in my code.

   for (i=0; i<game.pathLength; i++) 
          {

        if(player.playerInput[i]==0){

            printf("-");

            }else{
            if(game.bombs[i]==1 && game.treasure[i]==1)
            {
            printf("&");
            }
            else if (game.bombs[i]==1)
            {
             printf("!");
            }
            else if (game.treasure[i]==1)
            {
            printf("$");
            }else{
            printf(".");
            }
